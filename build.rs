// Generates the blog templates and Rust module

use std::{
    fs::{read_dir, File},
    io::{self, Write},
};

/// ROM directory
const GAMES_DIR: &str = "games";
/// Module name
const MODULE_NAME: &str = "roms";

fn write_imports(file: &mut File) -> Result<(), io::Error> {
    writeln!(file, "// this module was auto-generated by build.rs")?;
    writeln!(file, "use lazy_static::lazy_static;")?;
    writeln!(file, "use std::collections::HashMap;")?;
    writeln!(file)?;
    Ok(())
}

fn write_rom_inserts(file: &mut File) -> Result<(), io::Error> {
    writeln!(file, "lazy_static! {{")?;
    writeln!(
        file,
        "    pub static ref ROMS: HashMap<String, Vec<u8>> = {{"
    )?;
    writeln!(file, "        let mut ret = HashMap::new();")?;
    for entry in read_dir(format!("src/{}", GAMES_DIR))? {
        let entry = entry?;
        let name = entry
            .file_name()
            .to_str()
            .unwrap()
            .split('.')
            .collect::<Vec<&str>>()[0]
            .to_lowercase();
        let filepath = format!("\"{}/{}\"", GAMES_DIR, entry.file_name().to_str().unwrap());
        writeln!(
            file,
            "        ret.insert({:?}.to_string(), include_bytes!({}).to_vec());",
            name, filepath
        )?;
    }
    writeln!(file, "    ret")?;
    writeln!(file, "    }};")?;
    writeln!(file, "}}")?;
    Ok(())
}

fn generate_module() -> Result<(), io::Error> {
    let mut module = File::create(&format!("src/{}.rs", MODULE_NAME))?;
    // use statements
    write_imports(&mut module)?;
    // rom array
    write_rom_inserts(&mut module)?;
    Ok(())
}

fn generate() -> Result<(), io::Error> {
    generate_module()?;
    Ok(())
}

fn main() -> Result<(), io::Error> {
    println!("cargo:rerun-if-changed=src/{}", GAMES_DIR);
    for entry in read_dir(format!("src/{}", GAMES_DIR))? {
        let entry = entry?;
        println!("cargo:rerun-if-changed={:?}", entry.path());
    }
    if let Err(e) = generate() {
        eprintln!("Error: {}", e);
    }
    Ok(())
}
